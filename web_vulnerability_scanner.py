#!/usr/bin/env python3
"""
Ethical Web Vulnerability Scanner
For authorized penetration testing only
"""

import requests
import argparse
from urllib.parse import urljoin
from bs4 import BeautifulSoup

def scan_website(url):
    """Perform basic vulnerability checks"""
    results = {
        'url': url,
        'vulnerabilities': []
    }
    
    try:
        # Check for common vulnerabilities
        session = requests.Session()
        response = session.get(url, timeout=10)
        
        # 1. Check for SQL Injection possibilities
        test_url = urljoin(url, "/search?query=test'OR'1'='1")
        sqli_test = session.get(test_url)
        if "SQL syntax" in sqli_test.text:
            results['vulnerabilities'].append("Possible SQL Injection")
        
        # 2. Check for XSS vulnerabilities
        xss_test = urljoin(url, "/search?q=<script>alert('test')</script>")
        xss_response = session.get(xss_test)
        if "<script>alert('test')</script>" in xss_response.text:
            results['vulnerabilities'].append("Possible XSS Vulnerability")
        
        # 3. Check for sensitive files
        sensitive_files = ['robots.txt', '.env', 'wp-config.php']
        for file in sensitive_files:
            test_url = urljoin(url, file)
            resp = session.get(test_url)
            if resp.status_code == 200:
                results['vulnerabilities'].append(f"Exposed sensitive file: {file}")
        
        # 4. Check security headers
        security_headers = ['X-Frame-Options', 'Content-Security-Policy']
        missing_headers = [h for h in security_headers if h not in response.headers]
        if missing_headers:
            results['vulnerabilities'].append(f"Missing security headers: {', '.join(missing_headers)}")
        
    except Exception as e:
        results['error'] = str(e)
    
    return results

def main():
    parser = argparse.ArgumentParser(description="Ethical Web Vulnerability Scanner")
    parser.add_argument("url", help="URL to scan (include http:// or https://)")
    parser.add_argument("-o", "--output", help="Save results to file")
    args = parser.parse_args()

    print(f"\nScanning {args.url} for common vulnerabilities...")
    results = scan_website(args.url)
    
    if args.output:
        with open(args.output, 'w') as f:
            json.dump(results, f, indent=2)
        print(f"\nResults saved to {args.output}")
    else:
        print("\nScan Results:")
        print(json.dumps(results, indent=2))
    
    print("\nNote: This is a basic scan. Always verify findings manually.")

if __name__ == "__main__":
    main()
